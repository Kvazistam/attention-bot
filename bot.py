import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv
from aiogram.types import FSInputFile
from storage import (
    init_db, seed_questions, get_random_question,
    save_answer, get_user_history, save_user_setting, get_user_setting
)

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()
from state import user_state


def main_menu():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üß† –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    kb.button(text="üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é")
    kb.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    kb.button(text="üåü –ü—Ä–∏–º–∏–Ω–≥")
    return kb.as_markup(resize_keyboard=True)

def priming_menu():
    kb = ReplyKeyboardBuilder()
    options = [
        "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "–ö—Ä–µ–∞—Ç–∏–≤", "–î–æ–≤–µ—Ä–∏–µ", "–¶–µ–ª–∏",
        "–†–æ—Å—Ç", "–õ—é–±–æ–≤—å", "–ò–∑–æ–±–∏–ª–∏–µ", "–°–º–µ–ª–æ—Å—Ç—å"
    ]
    for opt in options:
        kb.button(text=opt)
    kb.button(text="üîô –ù–∞–∑–∞–¥")
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True)

@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –≤–Ω–∏–º–∞–Ω–∏—è üëÅÔ∏è", reply_markup=main_menu())

@dp.message(lambda msg: msg.text == "üß† –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: Message):
    q = await get_random_question()
    if not q:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return
    user_state[message.from_user.id] = q.id
    await message.answer(q.text)

@dp.message(lambda msg: msg.text == "üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é")
async def history(message: Message):
    hist = await get_user_history(message.from_user.id)
    if not hist:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ üì≠")
        return
    reply = "üìö –û—Ç–≤–µ—Ç—ã –∑–∞ 7 –¥–Ω–µ–π:\n\n"
    for ts, q_text, a_text in hist:
        reply += f"üïí {ts.strftime('%d.%m %H:%M')}\n‚ùì {q_text}\nüí¨ {a_text}\n\n"
    await message.answer(reply)

@dp.message(lambda msg: msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: Message):
    kb = ReplyKeyboardBuilder()
    kb.button(text="0 —Ä–∞–∑ –≤ –¥–µ–Ω—å")
    kb.button(text="1 —Ä–∞–∑ –≤ –¥–µ–Ω—å")
    kb.button(text="2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å")
    kb.button(text="3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å")
    kb.button(text="üîô –ù–∞–∑–∞–¥")
    await message.answer("–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã?", reply_markup=kb.as_markup(resize_keyboard=True))

@dp.message(lambda msg: msg.text in ["0 —Ä–∞–∑ –≤ –¥–µ–Ω—å", "1 —Ä–∞–∑ –≤ –¥–µ–Ω—å", "2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", "3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å"])
async def save_setting(message: Message):
    count = int(message.text[0])
    await save_user_setting(message.from_user.id, count)
    await message.answer(f"‚úÖ –ë—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å {count} —Ä–∞–∑ –≤ –¥–µ–Ω—å", reply_markup=main_menu())

@dp.message(lambda msg: msg.text == "üåü –ü—Ä–∏–º–∏–Ω–≥")
async def priming(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø—Ä–∏–º–∏–Ω–≥–∞ üåü", reply_markup=priming_menu())

@dp.message(lambda msg: msg.text in [
    "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "–ö—Ä–µ–∞—Ç–∏–≤", "–î–æ–≤–µ—Ä–∏–µ", "–¶–µ–ª–∏",
    "–†–æ—Å—Ç", "–õ—é–±–æ–≤—å", "–ò–∑–æ–±–∏–ª–∏–µ", "–°–º–µ–ª–æ—Å—Ç—å"
])
async def priming_choice(message: Message):
    filename = f"priming/{message.text.lower()}.md"
    img_path = f"images/{message.text.lower()}.jpg"
    print(filename)
    if not os.path.exists(filename):
        await message.answer("–§–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
        return
    with open(filename, "r", encoding="utf-8") as f:
        text = f.read()
    if os.path.exists(img_path):
        photo = FSInputFile(img_path)
        await message.answer_photo(photo, caption=text)
    else:
        await message.answer(text, reply_markup=priming_menu())

@dp.message(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥")
async def back(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=main_menu())

@dp.message()
async def handle_answer(message: Message):
    uid = message.from_user.id
    username = message.from_user.username
    if uid not in user_state:
        print(user_state, uid)
        await message.answer(" –û—Ç–≤–µ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ", reply_markup=main_menu())
        return
    qid = user_state.pop(uid)
    await save_answer(uid, qid, message.text, username=username)
    await message.answer("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω", reply_markup=main_menu())

async def main():
    from scheduler import start_scheduler
    await init_db()
    await seed_questions()
    asyncio.create_task(start_scheduler(bot))
    await dp.start_polling(bot)
    
    

if __name__ == "__main__":
    asyncio.run(main())
