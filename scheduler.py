# scheduler.py
import logging
from datetime import time
import os
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv

from storage import get_all_users_with_settings, get_user_setting, get_random_question
from state import user_state  # –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å

load_dotenv()
TZ = os.getenv("TZ")
logging.basicConfig(level=logging.INFO)
scheduler = AsyncIOScheduler(timezone=TZ)
bot: Bot | None = None

TIME_SLOTS = [time(19, 0), time(16, 0), time(12, 0)]

def _job_id(user_id: int, slot: int) -> str:
    return f"user:{user_id}:slot:{slot}"

async def send_daily_question(user_id: int):
    q = await get_random_question()
    if q and bot:
        try:
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç –ø—Ä–∏–≤—è–∑–∞–ª—Å—è –∫ –≤–æ–ø—Ä–æ—Å—É
            user_state[user_id] = q.id
            await bot.send_message(chat_id=user_id, text=f"üëÄ {q.text}")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
            


def remove_user_jobs(user_id: int):
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∂–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ –Ω–∞—à–∏–º —Å–ª–æ—Ç–∞–º)."""
    for i in range(len(TIME_SLOTS)):
        jid = _job_id(user_id, i)
        if scheduler.get_job(jid):
            scheduler.remove_job(jid)
            logging.info(f"–£–¥–∞–ª–µ–Ω–∞ –¥–∂–æ–±–∞ {jid} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

def schedule_user(user_id: int, times: int):
    """–°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –¥–∂–æ–±—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥ –Ω—É–∂–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–ª–æ—Ç–æ–≤."""
    remove_user_jobs(user_id)
    for i in range(min(times, len(TIME_SLOTS))):
        t = TIME_SLOTS[i]
        jid = _job_id(user_id, i)
        scheduler.add_job(
            send_daily_question,
            trigger=CronTrigger(hour=t.hour, minute=t.minute),
            args=[user_id],
            id=jid,
            replace_existing=True,
        )
        logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∂–æ–±–∞ {jid} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {t.hour}:{t.minute:02d}")

async def refresh_user_jobs(user_id: int):
    """–ü—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ –ë–î –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –¥–∂–æ–±—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    times = await get_user_setting(user_id)
    logging.info(f"–û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, times={times}")
    schedule_user(user_id, times)

async def schedule_jobs():
    """–ü–µ—Ä–≤–∏—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–¥–ª—è –≤—Å–µ—Ö, –∫—Ç–æ —É–∂–µ –≤ –ë–î)."""
    user_ids = await get_all_users_with_settings()
    logging.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    for uid in user_ids:
        times = await get_user_setting(uid)
        schedule_user(uid, times)

async def start_scheduler(bot_instance: Bot):
    global bot
    bot = bot_instance
    await schedule_jobs()
    scheduler.start()
