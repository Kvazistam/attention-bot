import asyncio
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, time
from storage import get_user_setting
from gsheet import save_response
import logging
import random
import os

from dotenv import load_dotenv
load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=API_TOKEN)

# –ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ Google –¢–∞–±–ª–∏—Ü—É)
QUESTIONS = [
    "–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Å–æ–±–µ–Ω–Ω–æ —Ö–æ—Ä–æ—à–æ?",
    "–ß—Ç–æ –≤—ã–∑–≤–∞–ª–æ —É —Ç–µ–±—è —Ä–∞–¥–æ—Å—Ç—å –∏–ª–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å?",
    "–ö–∞–∫—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç—ã —Å–µ–≥–æ–¥–Ω—è –∑–∞–º–µ—Ç–∏–ª?",
    "–í —á—ë–º —Å–µ–≥–æ–¥–Ω—è —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª(–∞) —Å–∏–ª—É, —è—Å–Ω–æ—Å—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∫—É?"
]

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
scheduler = AsyncIOScheduler()


# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (–º–æ–∂–Ω–æ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å)
TIME_SLOTS = [time(9, 0), time(14, 0), time(19, 0)]


# üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_daily_question(user_id: int):
    question = random.choice(QUESTIONS)
    try:
        await bot.send_message(chat_id=user_id, text=f"üëÄ {question}")
    except Exception as e:
        logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ user_settings
async def schedule_jobs():
    logging.info("üïì –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á...")

    # –ü—Ä–∏–º–µ—Ä: —Å–ø–∏—Å–æ–∫ user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ—é —Å–∏—Å—Ç–µ–º—É —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    user_ids = [row[0] for row in get_all_users_with_settings()]  # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö user_id, —É –∫–æ–≥–æ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    for user_id in user_ids:
        times = get_user_setting(user_id)
        for i in range(times):
            if i < len(TIME_SLOTS):
                scheduler.add_job(send_daily_question, "cron",
                    hour=TIME_SLOTS[i].hour,
                    minute=TIME_SLOTS[i].minute,
                    args=[user_id],
                    id=f"user_{user_id}_slot_{i}")


def get_all_users_with_settings():
    import sqlite3
    conn = sqlite3.connect("user_settings.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM settings")
    result = cursor.fetchall()
    conn.close()
    return result


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(schedule_jobs())
    scheduler.start()
    logging.info("üì° –®–µ–¥—É–ª–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    loop.run_forever()
